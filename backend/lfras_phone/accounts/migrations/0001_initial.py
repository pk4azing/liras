# Generated by Django 5.0.6 on 2025-08-11 10:45

import accounts.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True, default="", max_length=64, unique=True
                    ),
                ),
                (
                    "email",
                    models.EmailField(db_index=True, max_length=254, unique=True),
                ),
                ("full_name", models.CharField(blank=True, default="", max_length=255)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid US phone number in E.164 format, e.g. +14155552671.",
                                regex="^\\+1\\d{10}$",
                            )
                        ],
                    ),
                ),
                ("city", models.CharField(blank=True, default="", max_length=128)),
                ("address", models.CharField(blank=True, default="", max_length=512)),
                (
                    "client_id",
                    models.PositiveBigIntegerField(
                        blank=True, db_index=True, null=True
                    ),
                ),
                (
                    "client_code",
                    models.CharField(
                        blank=True, db_index=True, default="", max_length=32
                    ),
                ),
                (
                    "user_category",
                    models.CharField(
                        choices=[
                            ("superadmin", "SuperAdmin"),
                            ("admin", "Admin"),
                            ("standard", "Standard"),
                        ],
                        db_index=True,
                        default="standard",
                        max_length=16,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "users",
                "indexes": [
                    models.Index(fields=["email"], name="users_email_4b85f2_idx"),
                    models.Index(fields=["client_id"], name="users_client__8c3111_idx"),
                    models.Index(
                        fields=["client_code"], name="users_client__b960ff_idx"
                    ),
                    models.Index(
                        fields=["user_category"], name="users_user_ca_e655e9_idx"
                    ),
                ],
            },
            managers=[
                ("objects", accounts.models.UserManager()),
            ],
        ),
    ]
